﻿@*
    Copyright © 2024-Present The Synapse Authors
    <p>
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    <p>
    http://www.apache.org/licenses/LICENSE-2.0
    <p>
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@page "/workflows/new"
@page "/workflows/new/{namespace}/{name}"
@using ServerlessWorkflow.Sdk.Models
@using Synapse.Api.Client.Services
@inherits StatefulComponent<View, CreateWorkflowViewStore, CreateWorkflowViewState>
@inject IBreadcrumbManager BreadcrumbManager
@inject NavigationManager NavigationManager

<ApplicationTitle>New workflow</ApplicationTitle>

<h4>New Workflow</h4>
@if (loading)
{
    <div class="d-flex justify-content-center mt-5">
        <Loader />
    </div>
}
else
{
    <div class="d-flex justify-content-end mb-2">
        <PreferredLanguageSelector PreferredLanguageChange="Store.ToggleTextBasedEditorLanguageAsync" />
    </div>
    <StandaloneCodeEditor @ref="Store.TextEditor"
        ConstructionOptions="Store.StandaloneEditorConstructionOptions"
        OnDidInit="Store.OnTextBasedEditorInitAsync"
        OnDidChangeModelContent="Store.OnDidChangeModelContent"
        CssClass="h-100 min-h-0" 
    />

    <Accordion class="py-3 flex-shrink-0">
        <AccordionItem Title="Advanced Settings">
            <Content>
                <div>
                @if (operators != null && operators.Count() > 0)
                {
                    <label for="operator" class="fw-bolder mb-2">Run on:</label>
                    <select id="operator" class="form-select" @onchange="(e) => Store.SetOperator(e.Value?.ToString())">
                        <option value="">Any Operator</option>
                        @foreach (var op in operators)
                        {
                            var name = op.GetName() + "." + op.GetNamespace();
                            <option value="@name" selected="@(name == operatorName)">@name</option>
                        }
                    </select>
                }
                </div>
                <div class="mt-4">
                    <DictionaryEditor 
                        Title="Labels"
                        KeyPlaceholder="Enter label key"
                        ValuePlaceholder="Enter label value"
                        Entries="labels"
                        OnAddEntry="(kvp) => Store.AddLabel(kvp.Key, kvp.Value)"
                        OnRemoveEntry="Store.RemoveLabel"
                    />
                </div>                
                <div class="mt-4">
                    <DictionaryEditor 
                        Title="Annotations"
                        KeyPlaceholder="Enter annotation key"
                        ValuePlaceholder="Enter annotation value"
                        Entries="annotations"
                        OnAddEntry="(kvp) => Store.AddAnnotation(kvp.Key, kvp.Value)"
                        OnRemoveEntry="Store.RemoveAnnotation"
                    />
                </div>
            </Content>
        </AccordionItem>
    </Accordion>

    @if (problemDetails != null)
    {
        <div class="problems mt-2">
            <Callout Color="CalloutColor.Danger" Heading="@problemDetails.Title" Class="position-relative">
                <Icon Name="IconName.X" Class="position-absolute" @onclick="() => Store.SetProblemDetails(null)" />
                <p>@problemDetails.Detail?.Trim()</p>

                @if (problemDetails.Errors != null && problemDetails.Errors.Any())
                {
                    foreach (KeyValuePair<string, string[]> errorContainer in problemDetails.Errors)
                    {
                        @if (!string.IsNullOrWhiteSpace(errorContainer.Key)) {
                            <strong>@errorContainer.Key:</strong>
                        }
                        <ul>
                            @foreach (string error in errorContainer.Value)
                            {
                                @if (!string.IsNullOrWhiteSpace(error))
                                {
                                    <li>@error</li>
                                }
                            }
                        </ul>
                    }
                }
            </Callout>
        </div>
    }

    <Button class="mt-3" Color="ButtonColor.Primary" Outline="true" Disabled="saving" @onclick="async (_) => await Store.SaveWorkflowDefinitionAsync()">
        @if(!saving)
        {
            @("Save")
        }
        else
        {
            <Spinner Size="SpinnerSize.Small" Color="SpinnerColor.Primary" />
        }
    </Button>
}

@code {

    string? ns;
    string? name;
    bool loading = true;
    bool saving;
    private ProblemDetails? problemDetails = null;
    protected IEnumerable<Operator>? operators { get; set; }
    protected string? operatorName { get; set; }
    protected EquatableDictionary<string, string> labels { get; set; } = [];
    protected EquatableDictionary<string, string> annotations { get; set; } = [];
    string labelKey = string.Empty;
    string labelValue = string.Empty;

    [Parameter] public string? Namespace { get; set; }
    [Parameter] public string? Name { get; set; }

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        BreadcrumbManager.Use(Breadcrumbs.Workflows);
        BreadcrumbManager.Add(new($"New", $"/workflows/new"));
        Store.SetIsNew(true);
        Store.Operators.Subscribe(value => OnStateChanged(_ => operators = value), token: CancellationTokenSource.Token);
        Store.Labels.Subscribe(value => OnStateChanged(_ => labels = value), token: CancellationTokenSource.Token);
        Store.Annotations.Subscribe(value => OnStateChanged(_ => annotations = value), token: CancellationTokenSource.Token);
        Store.Operator.Subscribe(value => OnStateChanged(_ => operatorName = value), token: CancellationTokenSource.Token);
        Store.Namespace.Subscribe(value => OnStateChanged(_ => ns = value), token: CancellationTokenSource.Token);
        Store.Name.Subscribe(value => OnStateChanged(_ => name = value), token: CancellationTokenSource.Token);
        Store.Loading.Subscribe(value => OnStateChanged(_ => loading = value), token: CancellationTokenSource.Token);
        Store.Saving.Subscribe(value => OnStateChanged(_ => saving = value), token: CancellationTokenSource.Token);
        Store.ProblemDetails.Subscribe(problemDetails => OnStateChanged(cmp => cmp.problemDetails = problemDetails), token: CancellationTokenSource.Token);
    }

    /// <inheritdoc/>
    protected override void OnParametersSet()
    {
        if (Namespace != ns)
        {
            Store.SetNamespace(Namespace);
        }
        if (Name != name)
        {
            Store.SetName(Name);
            Store.SetIsNew(false);
        }
    }

    protected void AddLabel()
    {
        Store.AddLabel(labelKey, labelValue);
        labelKey = string.Empty;
        labelValue = string.Empty;
        OnStateChanged();
    }

}